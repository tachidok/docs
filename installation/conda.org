#+STARTUP: showall
#+STARTUP: latexpreview
#+TITLE: Anaconda and Python on ArchLinux for DeepLearning
#+AUTHOR: Julio C.

* Install conda on ArchLinux
This information comes from the official ArchWiki at https://wiki.archlinux.org/title/Conda

* Install PyTorch
- Recommended Python version > 3.8
- Tested with Python version 3.12.4

** Create an environment

#+BEGIN_SRC shell
conda create --name pytorch
#+END_SRC

If you get into the following error:
=CondaValueError: You have chosen a non-default solver backend (libmamba) but it was not recognized. Choose one of: classic.=

You may need to change the solver, to do so proceed with one of the following commands
#+begin_src shell
conda config --set solver classic
conda config --set solver libmamba
#+end_src

You can change the channel piority with the following command
#+begin_src
conda config --set channel_priority flexible
conda config --set channel_priority strict
#+end_src

You can get access to the installed CUDA version with the command =nvidia-smi=.

** Change environment
#+begin_src  shell
conda activate pytorch
#+end_src

to make sure you are on the corresponding environment use the command
#+begin_src shell
conda info
#+end_src

or

#+begin_src shell
conda env list
#+end_src

and look for the =*= as the mark of the active environment.

** Install Jupyter

#+begin_src shell
conda install -c conda-forge notebook
#+end_src

** Install and upgrade pip

#+begin_src shell
conda install pip
pip install --upgrade pip
#+end_src

** Install common packages

#+begin_src shell
pip install numpy scipy matplotlib scikit-learn scikit-optimize pandas seaborn
#+end_src

** Install Auto ScikitLearn
#+begin_src
pip install auto-sklearn
#+end_src

** Installing PyTorch
The information comes from the official web page https://pytorch.org/get-started/locally/
#+begin_src
pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124
#+end_src

** Testing the installation
Run the following code within a Python session

#+begin_src
import torch
x = torch.rand(5, 3)
print(x)
#+end_src

The output should print a random 5x3 tensor

To check whether GPU-CUDA is available run the following, ypu should have TRUE as output
#+begin_src
import torch
torch.cuda.is_available()
#+end_src
